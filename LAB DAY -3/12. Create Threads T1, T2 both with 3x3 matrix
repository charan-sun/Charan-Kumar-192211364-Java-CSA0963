class MatrixThread extends Thread {
    private int[][] matrix;

    public MatrixThread(int[][] matrix) {
        this.matrix = matrix;
    }

    public void run() {
        int count = 0;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                count++;
            }
        }
        System.out.println("Count of elements: " + count);
    }

    public int[][] getMatrix() {
        return matrix;
    }
}

public class MatrixAdditionThread {
    public static void main(String[] args) throws InterruptedException {
        int[][] matrix1 = { {1, 2, 3}, {4, 5, 6}, {7, 8, 9} };
        int[][] matrix2 = { {9, 8, 7}, {6, 5, 4}, {3, 2, 1} };
        
        MatrixThread t1 = new MatrixThread(matrix1);
        MatrixThread t2 = new MatrixThread(matrix2);
        Thread t3 = new Thread(() -> {
            try {
                t1.join();
                t2.join();
                int[][] result = new int[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        result[i][j] = t1.getMatrix()[i][j] + t2.getMatrix()[i][j];
                    }
                }
                System.out.println("Matrix Addition Result:");
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        System.out.print(result[i][j] + " ");
                    }
                    System.out.println();
                }
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        
        t1.start();
        t2.start();
        t3.start();
    }
}
